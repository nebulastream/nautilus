include(FetchContent)
include(cmake/macros.cmake)

if (NAUTILUS_DOWNLOAD_MLIR)
    execute_process(COMMAND uname -m OUTPUT_VARIABLE NES_HOST_PROCESSOR)

    set(MLIR_VERSION 21.1.2)
    if (CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
        # Linux-specific stuff
        get_linux_lsb_release_information()
        message(STATUS "Linux ${LSB_RELEASE_ID_SHORT} ${LSB_RELEASE_VERSION_SHORT} ${LSB_RELEASE_CODENAME_SHORT}")
        message(STATUS "CPU ${NES_HOST_PROCESSOR}")
        set(NES_SUPPORTED_UBUNTU_VERSIONS 22.04 24.04)
        if ((NOT${LSB_RELEASE_ID_SHORT} STREQUAL "Ubuntu") OR (NOT ${LSB_RELEASE_VERSION_SHORT} IN_LIST NES_SUPPORTED_UBUNTU_VERSIONS))
            message(FATAL_ERROR "Currently we only provide pre-build dependencies for Ubuntu: ${NES_SUPPORTED_UBUNTU_VERSIONS}. If you use a different linux please provide an own clang installation.")
        endif ()
        if (NES_HOST_PROCESSOR MATCHES "x86_64")
            set(CLANG_COMPRESSED_BINARY_NAME mlir-${MLIR_VERSION}-ubuntu-${LSB_RELEASE_VERSION_SHORT}-X64)
        elseif (NES_HOST_PROCESSOR MATCHES "arm64" OR NES_HOST_PROCESSOR MATCHES "aarch64")
            set(CLANG_COMPRESSED_BINARY_NAME mlir-${MLIR_VERSION}-ubuntu-${LSB_RELEASE_VERSION_SHORT}-arm64)
        endif ()
    elseif (CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin")
        if (NES_HOST_PROCESSOR MATCHES "x86_64")
            set(CLANG_COMPRESSED_BINARY_NAME mlir-${MLIR_VERSION}-osx-x64)
        elseif (NES_HOST_PROCESSOR MATCHES "arm64" OR NES_HOST_PROCESSOR MATCHES "aarch64")
            set(CLANG_COMPRESSED_BINARY_NAME mlir-${MLIR_VERSION}-osx-arm64)
        endif ()
    else ()
        message(FATAL_ERROR "${CMAKE_SYSTEM_NAME} is not supported")
    endif ()

    set(MLIR_COMPRESSED_FILE ${CMAKE_CURRENT_BINARY_DIR}/${CLANG_COMPRESSED_BINARY_NAME}.7z)
    IF (NOT EXISTS ${MLIR_COMPRESSED_FILE})
        message(STATUS "MLIR binaries at ${MLIR_COMPRESSED_FILE} do not exist!")

        download_file(https://github.com/nebulastream/mlir-binaries/releases/download/v${MLIR_VERSION}/${CLANG_COMPRESSED_BINARY_NAME}.tar.gz
                ${MLIR_COMPRESSED_FILE}_tmp)
        file(RENAME ${MLIR_COMPRESSED_FILE}_tmp ${MLIR_COMPRESSED_FILE})
    endif ()
    IF (NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/mlir-${MLIR_VERSION})
        message(STATUS "Un-compress clang binaries!")
        file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/mlir-${MLIR_VERSION}_tmp)
        file(ARCHIVE_EXTRACT INPUT ${MLIR_COMPRESSED_FILE} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/mlir-${MLIR_VERSION}_tmp PATTERNS mlir)
        file(RENAME ${CMAKE_CURRENT_BINARY_DIR}/mlir-${MLIR_VERSION}_tmp ${CMAKE_CURRENT_BINARY_DIR}/mlir-${MLIR_VERSION})
    endif ()

    message(STATUS "Found MLIR binaries with version: ${MLIR_VERSION}")
    # Setup cmake configuration to include libs
    set(LLVM_DIR "${CMAKE_CURRENT_BINARY_DIR}/mlir-${MLIR_VERSION}/mlir/lib/cmake/llvm")
    set(MLIR_DIR "${CMAKE_CURRENT_BINARY_DIR}/mlir-${MLIR_VERSION}/mlir/lib/cmake/mlir")
else ()
    message(STATUS "Use system compiler and local LLVM")
endif ()
